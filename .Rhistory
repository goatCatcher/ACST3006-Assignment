out*optimal_weights
optimal_weights
t(optimal_weights)
out*t(optimal_weights)
out[1:5]
out[1:5]*t(optimal_weights)
optimal_weights
0.1077/-0.018714346
-0.018714346/0.1077
out[1:5]%*%t(optimal_weights)
out[1:5]
t(optimal_weights)
out[,lapply(.SD, `*`, optimal_weights)]
optimal_weights
out[,lapply(.SD, `*`, t(optimal_weights))]
weighted_out <- sweep(out, 2, optimal_weights, `*`)
weighted_out
out
0.128656272 /0.1077
weighted_out
optimal_weights
0.128656272 /0.1077
# Part E ------------------------------------------------------------------
country_values <- country_portfolios[, dcast(.SD, Date ~ Investment, value.var = "Return")][,Date:=NULL]
weighted_out <- sweep(country_values, 2, optimal_weights, `*`)
market_value <- rowSums(weighted_out)
market_value
country_values[, Market:=market_value]
country_values
cov(country_values)
country_values[, mean(Market)]
country_cov <- cov(country_values)
diag(country_cov)
country_values[, Market]
country_cov[, Market]
country_cov
country_cov[, "Market"]
country_sd <- diag(country_cov)
country_sd
# Part E ------------------------------------------------------------------
country_values <- country_portfolios[, dcast(.SD, Date ~ Investment, value.var = "Return")][,Date:=NULL]
country_values
weighted_out <- sweep(country_values, 2, optimal_weights, `*`)
weighted_out
market_value <- rowSums(weighted_out)
market_value
country_values[, Market:=market_value]
country_values
colnames(country_values)
colnames(country_values)[:-1]
colnames(country_values)
market_cov
market_cov <- country_cov[, "Market"]
country_sd
market_cov
market_cov <- country_cov[, "Market"]
market_cov
market_cov <- country_cov[, "Market"][:-1]
market_cov <- country_cov[, "Market"][-1]
market_cov
nrows(country_cov)
nrow(country_cov)
market_cov <- country_cov[, "Market"][-nrow(country_cov)]
market_cov
market_cov <- country_cov[, "Market"][nrow(country_cov)]
market_cov
# Input to data.table
data.table(Country=colnames(country_values), Covariance = country_market_cov)
# Get Market Covariance
country_market_cov <- country_cov[, "Market"][-nrow(country_cov)]
# Input to data.table
data.table(Country=colnames(country_values), Covariance = country_market_cov)
# Get Market Covariance
country_market_cov <- country_cov[, "Market"][-nrow(country_cov)]
country_market_cov
# Input to data.table
data.table(country_market_cov)
# Input to data.table
data.table(names(country_market_cov))
# Input to data.table
data.table(Country = names(country_market_cov), Covariance = country_market_cov)
# Input to data.table
countries <- data.table(Country = names(country_market_cov), Covariance = country_market_cov)
countries
countries[, Beta := Covariance/market_var]
market_var <- country_cov[, "Market"][nrow(country_cov)]
countries[, Beta := Covariance/market_var]
countries
source("~/Uni/ACST3006/Assignment/Scripts/Q2.R", echo=TRUE)
# Hypothetical data
stocks <- data.frame(
Stock = c("A", "B", "C"),
Expected_Return = c(0.12, 0.10, 0.14),
Beta = c(1.2, 0.8, 1.5)
)
market_return <- 0.10
risk_free_rate <- 0.03
# Calculate the Security Market Line (SML)
stocks$SML_Return <- risk_free_rate + stocks$Beta * (market_return - risk_free_rate)
# Plot the SML and the individual stocks
ggplot(stocks, aes(x = Beta, y = Expected_Return, label = Stock)) +
geom_point(color = "blue") +
geom_text(vjust = -0.5) +
geom_line(aes(x = Beta, y = SML_Return), color = "red") +
labs(x = "Beta", y = "Expected Return", title = "Security Market Line") +
theme_minimal()
stocks
tangency_return
risk_free_rate
risk_free_rate
# Load the necessary libraries
library(data.table)
library(ggplot2)
library(quadprog)
# Read the data into R
data <- fread("Data/Q2.csv")
# Manipulate Data ---------------------------------------------------------
# Store the investment categories and investment types
investment_categories <- as.character(unlist(data[1, ]))[-1]
investment_types <- as.character(unlist(data[2, ]))[-1]
# Remove the first two rows and set the column names
data <- data[-c(1, 2)]
colnames(data) <- c("Date", as.vector(investment_types))
# Convert the data.table to long format using melt()
melted_data <- melt(data, id.vars = "Date", variable.name = "Investment", value.name = "Return")
# Add the investment types to the melted data
melted_data[, Investment_Category := investment_categories[Investment], by = Investment]
# Reorder the columns
melted_data <- melted_data[, .(Investment, Investment_Category, Date, Return)]
# Reorder the columns
melted_data <- melted_data[, .(Investment, Investment_Category, Date, Return)][, Return := as.numeric(Return)]
# Read the data into R
data <- fread("Data/Q2.csv")
# Manipulate Data ---------------------------------------------------------
# Store the investment categories and investment types
investment_categories <- as.character(unlist(data[1, ]))[-1]
investment_types <- as.character(unlist(data[2, ]))[-1]
data <- data[-c(1, 2)]
colnames(data) <- c("Date", as.vector(investment_types))
# Convert the data.table to long format using melt()
melted_data <- melt(data, id.vars = "Date", variable.name = "Investment", value.name = "Return")
melted_data[, Investment_Category := investment_categories[Investment], by = Investment]
melted_data <- melted_data[, .(Investment, Investment_Category, Date, Return)][, Return := as.numeric(Return)]
# Part A ------------------------------------------------------------------
# Calculate mean return
mean_returns <- melted_data[, .(Mean_Return = mean(Return)), by = .(Investment, Investment_Category)]
sd_returns <- melted_data[, .(SD_Return = sd(Return)), by = .(Investment, Investment_Category)]
risk_free_rate <- mean_returns[Investment == "US Riskfree", Mean_Return]
risk_free_rate
# Calculate the covariances and correlations among risky assets
risky_assets <- melted_data[Investment != "US Riskfree"]
risky_assets_wide <- dcast(risky_assets, Date ~ Investment, value.var = "Return")
# Remove the 'Date' column
risky_assets_wide[, Date:=NULL]
# Compute the covariance matrix
cov_matrix <- cov(risky_assets_wide)
# Compute the correlation matrix
cor_matrix <- cor(risky_assets_wide)
print(mean_returns)
# Part B ------------------------------------------------------------------
# Filter the data to keep only the country portfolios
country_portfolios <- risky_assets[Investment_Category == "Country Port"]
# Calculate the mean returns and covariance matrix for the country portfolios
mean_returns <- country_portfolios[, .(Mean_Return = mean(Return)), by = Investment]
cov_matrix <- cov(country_portfolios[, dcast(.SD, Date ~ Investment, value.var = "Return")][, Date:=NULL])
A <- t(mean_returns$Mean_Return) %*% solve(cov_matrix) %*% mean_returns$Mean_Return
B <- t(rep(1, 6)) %*% solve(cov_matrix) %*% mean_returns$Mean_Return
C <- t(rep(1, 6)) %*% solve(cov_matrix) %*% rep(1,6)
D <- A * C - B^2
# Define the function for the portfolio variance
portfolio_variance <- function(E_Rp) {
return((C * E_Rp^2 - 2 * B * E_Rp + A) / D)
}
# Define the range of expected returns
E_Rp_range <- seq(min(mean_returns$Mean_Return), max(mean_returns$Mean_Return), length.out = 500)
# Calculate the portfolio variances
portfolio_variances <- sapply(E_Rp_range, portfolio_variance)
# Calculate the portfolio standard deviations (Sigmas)
portfolio_sigmas <- sqrt(portfolio_variances)
# Create a data frame with the expected returns and portfolio standard deviations
efficient_frontier_data <- data.frame(E_Rp = E_Rp_range, Sigma = portfolio_sigmas)
# Find GMVP
GMVP_Return <- B/C
GMVP_Var <- 1/C
GMVP_SD <- 1/sqrt(C)
# Find CML
tangency_return <- (A-risk_free_rate*B)/(B-risk_free_rate*C)
tangency_sd <- ((C*tangency_return^2-2*B*tangency_return+A)/D)^0.5
cml_slope <- (D*tangency_sd)/(C*tangency_return-B)
cml_intercept <- risk_free_rate
cml_x <- seq(0, max(efficient_frontier_data$Sigma), 0.01)
cml_y <- cml_intercept + as.vector(cml_slope) * cml_x
cml_df <- data.frame(Return = cml_y, SD = cml_x)
# Part D ------------------------------------------------------------------
portfolio_options <- data.table(Porfolio = c(1,2,3), `Risky Portfolio` = c(0, 300000, 500000), `Risk Free Portfolio` = c(500000, 200000, 0))
portfolio_options[, `:=`(Return = `Risky Portfolio`*(1+tangency_return[1])+`Risk Free Portfolio`*(1+risk_free_rate),
SD = sqrt(`Risky Portfolio`^2*tangency_sd[1]^2))]
# Part E ------------------------------------------------------------------
country_values <- country_portfolios[, dcast(.SD, Date ~ Investment, value.var = "Return")][,Date:=NULL]
# Get Market Portfolio
country_values[, Market:=rowSums(sweep(country_values, 2, optimal_weights, `*`))]
# Calculate Covariance
country_cov <- cov(country_values)
# Get Market Covariance
country_market_cov <- country_cov[, "Market"][-nrow(country_cov)]
# Find weights
weights = solve(cov_matrix) %*% matrix(c(mean_returns$Mean_Return, rep(1,nrow(mean_returns))), nrow=nrow(mean_returns)) %*%
matrix(c(C, -B, -B, A), nrow=2) %*% matrix(c(tangency_return, 1), nrow = 2)
optimal_weights <- weights / D[1]
# Part E ------------------------------------------------------------------
country_values <- country_portfolios[, dcast(.SD, Date ~ Investment, value.var = "Return")][,Date:=NULL]
# Get Market Portfolio
country_values[, Market:=rowSums(sweep(country_values, 2, optimal_weights, `*`))]
# Calculate Covariance
country_cov <- cov(country_values)
# Get Market Covariance
country_market_cov <- country_cov[, "Market"][-nrow(country_cov)]
market_var <- country_cov[, "Market"][nrow(country_cov)]
# Input to data.table
countries <- data.table(Country = names(country_market_cov), Covariance = country_market_cov)
countries[, Beta := Covariance/market_var]
risk_free_rate
tangency_return[1]
tangency_return[1] - risk_free_rate
tangency_return - risk_free_rate
efficient_frontier_data$Sigma
max(efficient_frontier_data$Sigma)
# Create the plot using ggplot2
plot <- ggplot() +
geom_point(data = efficient_frontier_data, aes(x = Sigma, y = E_Rp), size = 0.5, color = "blue", alpha = 0.5) +
geom_point(aes(x = GMVP_SD, y = GMVP_Return), color = "red", size = 4) +
geom_line(data = cml_df, aes(x = SD, y = Return), color = "green", size = 1) +
geom_line(data = sml_df, aes(x = SD, y = Return), color = "blue", size = 1) +
labs(x = "Portfolio Standard Deviation (Sigma)", y = "Portfolio Expected Return (E(R))",
title = "Efficient Frontier, Tangency Portfolio, and CAL") +
theme_minimal()
sml_slope <- tangency_return - risk_free_rate
sml_intercept <- risk_free_rate
sml_x <- seq(0, max(efficient_frontier_data$Sigma), 0.01)
sml_y <- sml_intercept + as.vector(sml_slope) * cml_x
sml_df <- data.frame(Return = sml_y, SD = sml_x)
# Create the plot using ggplot2
plot <- ggplot() +
geom_point(data = efficient_frontier_data, aes(x = Sigma, y = E_Rp), size = 0.5, color = "blue", alpha = 0.5) +
geom_point(aes(x = GMVP_SD, y = GMVP_Return), color = "red", size = 4) +
geom_line(data = cml_df, aes(x = SD, y = Return), color = "green", size = 1) +
geom_line(data = sml_df, aes(x = SD, y = Return), color = "blue", size = 1) +
labs(x = "Portfolio Standard Deviation (Sigma)", y = "Portfolio Expected Return (E(R))",
title = "Efficient Frontier, Tangency Portfolio, and CAL") +
theme_minimal()
print(plot)
countries
# Australia Beta
countries[Country="Australia", Beta]
# Australia Beta
countries[Country=="Australia", Beta]
market_var
risk_free_rate + (0.0045/market_var)*(tangency_return - risk_free_rate)
mean_returns
# Find sml line
class(mean_returns)
# Find sml line
mean_returns[, Beta:=(Mean_Return-risk_free_rate)/(tangency_return - risk_free_rate)]
tangency_return
# Find sml line
mean_returns[, Beta:=(Mean_Return-risk_free_rate)/(tangency_return[1] - risk_free_rate)]
mean_returns
countries
# Australia Beta
mean_returns[Investment=="Australia", Beta]
# Load the necessary libraries
library(stats)
library(pracma)
library(ggplot2)
# Define mean returns, standard deviations, and correlation
mean_return1 <- 0.015
mean_return2 <- 0.008
sd1 <- 0.1
sd2 <- 0.05
correlation <- 0.4
# Calculate the covariance
covariance <- correlation * sd1 * sd2
# Define the risk-free rate (assumed, use appropriate value)
risk_free_rate <- 0.004
# Calculate optimal weights for the tangency portfolio using Sharpe Ratio
cov_matrix <- matrix(c(sd1^2, covariance, covariance, sd2^2), nrow=2)
cov_matrix
inverse_cov_matrix
inverse_cov_matrix <- inv(cov_matrix)
inverse_cov_matrix
covariance
mean_returns <- c(0.015, 0.008)
A <- t(mean_returns) %*% solve(cov_matrix) %*% mean_returns
A
B <- t(rep(1, 2)) %*% solve(cov_matrix) %*% mean_returns
C <- t(rep(1, 2)) %*% solve(cov_matrix) %*% rep(1,2)
D <- A * C - B^2
B
C
D
tangency_return <- (A-risk_free_rate*B)/(B-risk_free_rate*C)
tangency_return
tangency_return <- (risk_free_rate*B-A)/(risk_free_rate*C-B)
tangency_return
tangency_sd <- ((C*tangency_return^2-2*B*tangency_return+A)/D)^0.5
tangency_sd
# Calculate the Sharpe Ratio for the tangency portfolio
tangency_sharpe_ratio <- (tangency_return - risk_free_rate) / tangency_sd
# Define the capital allocation line (CAL)
cal_slope <- tangency_sharpe_ratio
cal_intercept <- risk_free_rate
cal_intercept
cal_slope
(D*tangency_sd)/(C*tangency_return-B)
# Create a grid of portfolio weights
weights <- seq(-6, 5, 0.01)
weights
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_returns <- rep(0, length(weights))
portfolio_returns
weights
# Create a grid of portfolio weights
weights <- seq(-6, 5, 0.25)
weights
seq(-0.8, 1.2, 0.1)
c(-5, -1.5, seq(-0.8, 1.2, 0.1))
weights <- c(-5, -1.5, seq(-0.8, 1.2, 0.1), 2.5, 7.5)
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_returns <- rep(0, length(weights))
portfolio_sds
portfolio_sds <- rep(0, length(weights))
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_returns <- rep(0, length(weights))
portfolio_sds <- rep(0, length(weights))
portfolio_sds
for (i in 1:length(weights)) {
weight_asset1 <- weights[i]
weight_asset2 <- 1 - weight_asset1
portfolio_weights <- c(weight_asset1, weight_asset2)
portfolio_returns[i] <- sum(portfolio_weights * c(mean_return1, mean_return2))
portfolio_sds[i] <- sqrt(t(portfolio_weights) %*% cov_matrix %*% portfolio_weights)
}
portfolio_returns
portfolio_sds
weight_asset1
weights <- c(-5, -1.5, seq(-0.8, 1.2, 0.1), 2.5, 7.5)
# Create a data.table with all possible portfolio_weights
portfolio_weights_dt <- data.table(weight_asset1 = weights, weight_asset2 = 1 - weights)
library(data.table)
# Create a data.table with all possible portfolio_weights
portfolio_weights_dt <- data.table(weight_asset1 = weights, weight_asset2 = 1 - weights)
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return = sum(weight_asset1 * mean_return1 + weight_asset2 * mean_return2),
portfolio_sd = sqrt(t(c(weight_asset1, weight_asset2)) %*% cov_matrix %*% c(weight_asset1, weight_asset2))),
by = .(weight_asset1, weight_asset2)]
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return := sum(weight_asset1 * mean_return1 + weight_asset2 * mean_return2),
portfolio_sd := sqrt(t(c(weight_asset1, weight_asset2)) %*% cov_matrix %*% c(weight_asset1, weight_asset2))),
by = .(weight_asset1, weight_asset2)]
# Create a data.table with all possible portfolio_weights
portfolio_weights_dt <- data.table(weight_asset1 = weights, weight_asset2 = 1 - weights)
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
portfolio_sd = sqrt((weight_asset1 * mean_return1 + weight_asset2 * mean_return2) %*% cov_matrix %*% c(weight_asset1, weight_asset2))),
by = .(weight_asset1, weight_asset2)]
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
portfolio_sd = sqrt(matrix(c(weight_asset1, weight_asset2), nrow = 1) %*% cov_matrix %*% matrix(c(weight_asset1, weight_asset2), ncol = 1))),
by = .(weight_asset1, weight_asset2)]
portfolio_weights_dt
weight_asset1 <- 1.5
weight_asset2 <- -0.5
sqrt(matrix(c(weight_asset1, weight_asset2), nrow = 1)
matrix(c(weight_asset1, weight_asset2), nrow = 1)
matrix(c(weight_asset1, weight_asset2), nrow = 1)
sqrt(matrix(c(weight_asset1, weight_asset2), nrow = 1) %*% cov_matrix %*% matrix(c(weight_asset1, weight_asset2), ncol = 1))
sqrt(matrix(c(weight_asset1, weight_asset2), nrow = 1) %*% cov_matrix %*% matrix(c(weight_asset1, weight_asset2), ncol = 1))[1]
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
portfolio_sd = sqrt(matrix(c(weight_asset1, weight_asset2), nrow = 1) %*% cov_matrix %*% matrix(c(weight_asset1, weight_asset2), ncol = 1))[1]),
by = .(weight_asset1, weight_asset2)]
portfolio_stats
weights <- c(-5, -1.5, seq(-0.8, 1.2, 0.1), 2.5, 7.5)
portfolio_weights_dt <- CJ(weight_asset1 = weights, weight_asset2 = 1 - weights)
portfolio_weights_dt
portfolio_weights_dt[, `:=`(portfolio_return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2)]
portfolio_weights_dt[, `:=`(portfolio_sd = sqrt(sum((c(weight_asset1, weight_asset2) * c(mean_return1, mean_return2)) *
(cov_matrix %*% c(weight_asset1, weight_asset2)))))]
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
portfolio_sd = sqrt(c(weight_asset1, weight_asset2) %*% cov_matrix %*% c(weight_asset1, weight_asset2))[1]),
by = .(weight_asset1, weight_asset2)]
portfolio_stats
portfolio_sds
# Create a data.table with all possible portfolio_weights
portfolio_weights_dt <- data.table(weight_asset1 = weights, weight_asset2 = 1 - weights)
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(portfolio_return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
portfolio_sd = sqrt(c(weight_asset1, weight_asset2) %*% cov_matrix %*% c(weight_asset1, weight_asset2))[1]),
by = .(weight_asset1, weight_asset2)]
portfolio_stats
source("~/Uni/ACST3006/Assignment/Scripts/Q1.R", echo=TRUE)
portfolio_stats$portfolio_sd
portfolio_stats$SD
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(Return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
SD = sqrt(c(weight_asset1, weight_asset2) %*% cov_matrix %*% c(weight_asset1, weight_asset2))[1]),
by = .(weight_asset1, weight_asset2)]
# Calculate the CAL line
cal_x <- seq(0, max(portfolio_stats$SD), 0.01)
source("~/Uni/ACST3006/Assignment/Scripts/Q1.R", echo=TRUE)
source("~/Uni/ACST3006/Assignment/Scripts/Q1.R", echo=TRUE)
source("~/Uni/ACST3006/Assignment/Scripts/Q1.R", echo=TRUE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
portfolio_weights_dt
portfolio_stats_df <- portfolio_stats %>%
as.data.frame() %>%
mutate(across(starts_with("weight"), percent, accuracy = 0.01),
Return = percent(Return, accuracy = 0.01),
Return = percent(SD, accuracy = 0.01))
library(dyplr)
library(dyplyr)
library(dplyr)
library(scales)
portfolio_stats_df <- portfolio_stats %>%
as.data.frame() %>%
mutate(across(starts_with("weight"), percent, accuracy = 0.01),
Return = percent(Return, accuracy = 0.01),
Return = percent(SD, accuracy = 0.01))
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
# Load the necessary libraries
library(stats)
library(pracma)
library(ggplot2)
library(data.table)
library(dplyr)
library(scales)
install.packages('dplyr')
install.packages("dplyr")
# Define mean returns, standard deviations, and correlation
mean_return1 <- 0.015
mean_return2 <- 0.008
sd1 <- 0.1
sd2 <- 0.05
correlation <- 0.4
# Calculate the covariance
covariance <- correlation * sd1 * sd2
# Define the risk-free rate (assumed, use appropriate value)
risk_free_rate <- 0.004
# Calculate optimal weights for the tangency portfolio using Sharpe Ratio
cov_matrix <- matrix(c(sd1^2, covariance, covariance, sd2^2), nrow=2)
inverse_cov_matrix <- inv(cov_matrix)
mean_returns <- c(0.015, 0.008)
A <- t(mean_returns) %*% solve(cov_matrix) %*% mean_returns
# Load the necessary libraries
library(stats)
library(pracma)
library(ggplot2)
library(data.table)
library(dplyr)
library(scales)
# Define mean returns, standard deviations, and correlation
mean_return1 <- 0.015
mean_return2 <- 0.008
sd1 <- 0.1
sd2 <- 0.05
correlation <- 0.4
# Calculate the covariance
covariance <- correlation * sd1 * sd2
# Define the risk-free rate (assumed, use appropriate value)
risk_free_rate <- 0.004
# Calculate optimal weights for the tangency portfolio using Sharpe Ratio
cov_matrix <- matrix(c(sd1^2, covariance, covariance, sd2^2), nrow=2)
inverse_cov_matrix <- inv(cov_matrix)
mean_returns <- c(0.015, 0.008)
A <- t(mean_returns) %*% solve(cov_matrix) %*% mean_returns
B <- t(rep(1, 2)) %*% solve(cov_matrix) %*% mean_returns
C <- t(rep(1, 2)) %*% solve(cov_matrix) %*% rep(1,2)
D <- A * C - B^2
tangency_return <- (risk_free_rate*B-A)/(risk_free_rate*C-B)
tangency_sd <- ((C*tangency_return^2-2*B*tangency_return+A)/D)^0.5
## ChatGPT
excess_returns <- c(mean_return1 - risk_free_rate, mean_return2 - risk_free_rate)
optimal_weights <- inverse_cov_matrix %*% excess_returns / sum(inverse_cov_matrix %*% excess_returns)
# Calculate the expected return and standard deviation for the tangency portfolio
tangency_return <- sum(optimal_weights * c(mean_return1, mean_return2))
tangency_sd <- sqrt(t(optimal_weights) %*% cov_matrix %*% optimal_weights)
# Calculate the Sharpe Ratio for the tangency portfolio
tangency_sharpe_ratio <- (tangency_return - risk_free_rate) / tangency_sd
# Define the capital allocation line (CAL)
cal_slope <- tangency_sharpe_ratio
cal_intercept <- risk_free_rate
# Create a grid of portfolio weights
weights <- c(-5, -1.5, seq(-0.8, 1.2, 0.1), 2.5, 7.5)
# Create a data.table with all possible portfolio_weights
portfolio_weights_dt <- data.table(weight_asset1 = weights, weight_asset2 = 1 - weights)
# Calculate the expected return and standard deviation for all possible portfolios
portfolio_stats <- portfolio_weights_dt[, .(Return = weight_asset1 * mean_return1 + weight_asset2 * mean_return2,
SD = sqrt(c(weight_asset1, weight_asset2) %*% cov_matrix %*% c(weight_asset1, weight_asset2))[1]),
by = .(weight_asset1, weight_asset2)]
portfolio_stats_df <- portfolio_stats %>%
as.data.frame() %>%
mutate(across(starts_with("weight"), percent, accuracy = 0.01),
Return = percent(Return, accuracy = 0.01),
Return = percent(SD, accuracy = 0.01))
portfolio_stats_df
portfolio_stats_df <- portfolio_stats %>%
as.data.frame() %>%
mutate(across(starts_with("weight"), percent, accuracy = 0.01),
Return = percent(Return, accuracy = 0.01),
SD = percent(SD, accuracy = 0.01))
